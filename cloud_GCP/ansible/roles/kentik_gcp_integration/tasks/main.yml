---
# tasks file for roles/kentik_gcp_integration
- name: get project
  local_action:
    module: shell gcloud config get-value project
  register: output
  changed_when: false

  # Create YAML anchor -> DRY rule
- set_fact: &cc
    auth_kind: serviceaccount
    project: "{{ output.stdout }}"

- debug:
    var: output.stdout
    
- name: Install dependencies for gcp_* modules locally
  local_action:
    module: pip
    name:
    - requests >= 2.18.4
    - google-auth >= 1.3.0
  run_once: True

#Filters should be supplied
- name: Get info about networks
  gcp_compute_network_info:
    <<: *cc
    filters:
    - name = patryk-test
  register: network_info_output

- set_fact:
    networks: "{{network_info_output.resources}}"
  
- debug:
    var: networks

## Now to find subnetworks
- name: Get subnetworks
  gcp_compute_subnetwork_info:
    <<: *cc
    filters:
    - name = subnet-1
    region: us-east1
  register: subnet_output

- set_fact:
    subnets: "{{subnet_output.resources}}"
  
- debug:
    var: subnets

# integration starts here

- debug:
    var: networks[0]

- name: For each subnet enable log flow
  gcp_compute_subnetwork:
    <<: *cc
    name: "{{ item.name}}"
    ip_cidr_range: "{{item.ipCidrRange}}"
    region: "{{ item.region | urlsplit('path') | basename }}"
    enable_flow_logs: true
    network: "{{ networks[0] }}"
  loop: "{{ subnets  }}"
  register: enabled_logflow

- name: Enable flow log for subnets without it using gcloud
  command:
    argv:
    - gcloud
    - compute networks subnets update
    - "--enable-flow-logs {{ item.name }}"
    - "--region={{ item.region | urlsplit('path') | basename }}"
  when: not item.enableFlowLogs
  loop: "{{ subnets  }}"
  register: enabled_logflow_shell

- name: Enabled logflow shell info
  debug:
    var: enabled_logflow_shell


# - name

# input: VPC list of vpc
# or better list of filters
# print list of matched vpcs
# for each subnet in those vpcs 
# enable logflow gcp_logging_metric_info
- name: create a topic
  gcp_pubsub_topic:
    name: test-topic1
    <<: *cc
    state: present
  register: topic

- name: create a subscription
  gcp_pubsub_subscription:
    <<: *cc
    name: test_object
    topic: "{{ topic }}"
    ack_deadline_seconds: 300
    state: present

# - name: Create sink